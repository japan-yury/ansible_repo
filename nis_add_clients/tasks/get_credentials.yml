---
- name: Getting a path for master record in Vault
  include_tasks: get_master_record_vault.yml

- name: Getting user's password with root privileges on Linux OS in Vault
  block:
    - name: Identifying the current Linux OS Root user's details in Vault
      uri:
        url: "{{ api_url_credential }}/{{ store }}/root?idType=PATH"
        method: GET
        headers:
          Vault-Token: "{{ vault_token }}"
          Content-Type: "application/json"
        status_code: 200
        validate_certs: no
      retries: 5
      delay: 5
      delegate_to: localhost
      register: api_output
      ignore_errors: yes
      until: api_output.status == 200
      no_log: "{{ no_log_value }}"

    - name: Setting the output for extracted Linux OS root user's details found in Vault
      set_fact:
        in_json: "{{ api_output }}"
      when: api_output.failed == false
      no_log: "{{ no_log_value }}"

    - name: Setting the username of Linux OS root extracted from Vault
      set_fact:
        vault_user: "{{ api_output.json.username }}"
      when: api_output.failed == false and api_output.json != []

    - name: Setting the password of Linux OS Root extracted from Vault
      set_fact:
        vault_password: "{{ api_output.json.password }}"
      no_log: "{{ no_log_value }}"
      when: api_output.failed == false and api_output.json != []

    - name: Identifying the current Linux OS user in Vault (backup approach)
      uri:
        url: "{{ api_url }}"
        method: GET
        headers:
          Vault-Token: "{{ vault_token }}"
          Content-Type: "application/json"
        status_code: 200
        validate_certs: no
      retries: 5
      delay: 5
      delegate_to: localhost
      register: api_output_backup
      until: api_output_backup.status == 200
      no_log: "{{ no_log_value }}"
      when: 
        - api_output is failed
        - vault_user is undefined
        - vault_password is undefined

    - name: Setting the credentials extracted from Vault for the following login in to the host
      set_fact:
        in_json: "{{ api_output_backup }}"
      when: 
        - api_output is failed
        - vault_user is undefined
        - vault_password is undefined
      no_log: "{{ no_log_value }}"

    - name: Message out when no credentials in Vault
      fail:
        msg: 'Credentials could not be found in Vault for "{{ inventory_hostname }}"'
      when: 
        - in_json.failed == true
        - in_json.status != '200'

    - name: Setting the username for Linux extracted from Vault
      set_fact:
        vault_user: "{{ api_output_backup.json[0].username }}"
      when: api_output.failed == true and api_output_backup.json != []

    - name: Setting the password for Linux extracted from Vault
      set_fact:
        vault_password: "{{ api_output_backup.json[0].password }}"
      when: api_output.failed == true and api_output_backup.json != []
      no_log: "{{ no_log_value }}"

    - name: Message out when no vault_user and vault_password set
      fail:
        msg: 'Credentials could not be identified and set for "{{ inventory_hostname }}"'
      when:
        - vault_user is undefined
        - vault_password is undefined